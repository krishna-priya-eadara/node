{"version":3,"file":"server.js","sourceRoot":"","sources":["server.ts"],"names":[],"mappings":"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","sourcesContent":["const WebSocketServer = require('ws').Server;\nimport { Logger } from \"./Logger\";\nimport { SOCKET_EVENTS, LOG_TYPES } from \"./Constants\";\n\n\nconst getUniqueID = function () {\n    let dt = new Date().getTime();\n    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        let r = (dt + Math.random()*16)%16 | 0;\n        dt = Math.floor(dt/16);\n\n        return (c=='x' ? r :(r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n};\n\nmodule ServerUtilities {\n    export let clients = {};\n    export let games = {};\n\n    let events = {\n        message: function(message) {\n            SocketMessageFactory.processClientRequest(this, message);\n        },\n        error: function(error) {\n            Logger.Log('Client connection error ' + this[\"id\"] + '!!' + '\\nError message: ' + error, LOG_TYPES.LOG);\n        },\n        close: function() {\n            delete ServerUtilities.clients[this[\"id\"]];\n            Logger.Log('Client terminated ' + this[\"id\"] + ' port!!', LOG_TYPES.LOG);\n        },\n        connection: function(clientSocket) {\n            clientSocket[\"id\"] = getUniqueID();\n            clients[clientSocket[\"id\"]] = clientSocket;\n            SOCKET_EVENTS.forEach((event) => {\n                clientSocket.on(event, events[event].bind(clientSocket));\n            });\n        }\n    }\n\n    export function subscribe(context, eventName) {\n\n    }\n    export function socketMessageListenerInit(socket) {\n        socket.on('connection', events.connection.bind(this));\n    }\n}\n\nmodule SocketMessageFactory {\n     export function processClientRequest(socketConnection, data) {\n        data = JSON.parse(data);\n        switch(data.event) {\n            case 'clientInit' :\n                Logger.Log('Client connected ' + data.name + ' !!', LOG_TYPES.LOG);\n                ServerUtilities.clients[socketConnection[\"id\"]].name = data.name;\n                break;\n            case 'refreshConnections':\n                let availableConnections = [];\n                Object.values(ServerUtilities.clients).forEach((item) => {\n                    if(item[\"id\"] !== socketConnection.id) {\n                        availableConnections.push({\n                            name: item[\"name\"],\n                            id: item[\"id\"]\n                        });\n                    }\n                });\n                socketConnection.send(JSON.stringify(availableConnections))\n                break;\n            case 'requestGame':\n                let opponent = ServerUtilities.clients[data.requestOpponent.id];\n                opponent.send(JSON.stringify({\n                    'event': 'requestGame',\n                    'requestOpponent': {\n                        'name': socketConnection.name,\n                        'id': socketConnection.id\n                    }\n                }));\n                break;\n            case 'acceptGame':\n                let requestedOpponent = ServerUtilities.clients[data.requestOpponent.id];\n                let gameDetails = {\n                    'player1': {\n                        'name': socketConnection.name,\n                        'id': socketConnection.id,\n                        'symbol': 'X',\n                        'shallStart': true\n                    },\n                    'player2': {\n                        'name': requestedOpponent.name,\n                        'id': requestedOpponent.id,\n                        'symbol': 'O',\n                        'shallStart': false\n                    },\n                    'data': [[null, null, null],[null, null, null],[null, null, null]]\n                };\n                ServerUtilities.games[getUniqueID()] = gameDetails;\n                socketConnection.send(JSON.stringify({\n                    'event': 'gameInit',\n                    ...gameDetails\n                }));\n                requestedOpponent.send(JSON.stringify({\n                    'event': 'gameInit',\n                    ...gameDetails\n                }));\n\n                break;\n            case 'gameEvent':\n                let cellData = data.playerdata.cellData;\n                let game = ServerUtilities.games[data.playerdata.gameid];\n                game.data[cellData.row][cellData.column] = cellData.symbol;\n                let enabledClient = game.players.player1.id;\n                if(game.players.player1.id === socketConnection.id) {\n                    enabledClient = game.players.player2.id;\n                }\n                ServerUtilities.clients[game.players.player1].send(JSON.stringify({\n                    'event': 'gameInit',\n                    'data': game.data,\n                    'enabledClientId': enabledClient\n                }));\n                ServerUtilities.clients[game.players.player2].send(JSON.stringify({\n                    'event': 'gameInit',\n                    'data': game.data,\n                    'enabledClientId': enabledClient\n                }));\n                break;\n        }\n    }\n}\n\nexport class Server {\n    portNumber: number;\n    private _connection: any;\n    private _listenTo: any;\n\n    constructor(port) {\n        this.portNumber = port;\n    }\n    on() {\n        this._connection = new WebSocketServer({port: this.portNumber});\n        ServerUtilities.socketMessageListenerInit(this._connection);\n        Logger.Log('Socket started at ' + this.portNumber + ' port!!', LOG_TYPES.LOG);\n    }\n    off() {\n        this._connection.close();\n    }\n    listenTo(eventName) {\n        ServerUtilities.subscribe(this, eventName);\n    }\n}\n\n"]}